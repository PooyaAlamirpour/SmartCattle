@using System.Threading;
@using SmartCattle.DomainClass
@model List<SmartCattle.Web.Domain.FreeStallTbl>

<style>
    #chartdiv1 {
        width: 100%;
        height: 400px;
    }

    #chartdiv2 {
        width: 100%;
        height: 400px;
    }

    #chartdiv3 {
        width: 100%;
        height: 400px;
    }

    .curve-10 {
        border-radius: 10px;
    }

    .header {
        width: 100%;
        height: 40px;
        margin-top: 15px;
        background-color: #fea102
    }

    .center-vertically {
        text-align: center;
        vertical-align: middle;
        line-height: 40px;
    }

    .text-bold {
        font-weight: 900;
        font-size: 16px
    }

    .popover table td, th {
        min-width: 5px !important;
        max-width: none !important;
        font-family: 'WYekan';
    }
</style>
<link href="~/assets/css/MdBootstrapPersianDateTimePicker/jquery.Bootstrap-PersianDateTimePicker.css" rel="stylesheet" />

<input type="hidden" value="@ViewBag.FreeStallId" id="FreeStallId" />
<input type="hidden" value="" id="SelectedMAC" />
<div class="row">
    <div class="col-lg-11-5 col-md-11 col-sm-11 col-xs-11 curve-10" style="background-color:white;margin-top:10px;width:99%">
        <div class="card">
            <div class="curve-10" style="background-color:white;height:70px;">
                <div id="Tempreture" style="margin-top:30px">

                    <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                        <div id="fromDateWidget" class="col-lg-3 col-md-3 col-sm-12 col-xs-12" data-mddatetimepicker="true" data-targetselector="#fromDate" data-trigger="click" data-enabletimepicker="false" data-isgregorian="false">
                            <div>
                                <div class="glyphicon glyphicon-calendar col-md-1"></div>
                                @{
                                    if (@Thread.CurrentThread.CurrentCulture.Name == "fa-IR")
                                    {
                                        <span class="col-md-2" style="margin-top:16px;margin-right:0px;margin-right:-30px">@Localization.getString("From")</span>
                                    }
                                    else
                                    {
                                        <span class="col-md-2" style="margin-top:16px;margin-right:0px;margin-left:-35px">@Localization.getString("From")</span>
                                    }
                                }
                            </div>
                            @{
                                if (@Thread.CurrentThread.CurrentCulture.Name == "fa-IR")
                                {
                                    <div style="margin-right: 10px;">
                                        <input type="text" class="form-control no-padding col-md-10" id="fromDate" placeholder="از تاریخ" />
                                    </div>
                                }
                                else
                                {
                                    <div style="margin-left: 60px;">
                                        <input type="text" class="form-control no-padding col-md-10" id="fromDate" placeholder="از تاریخ" />
                                    </div>
                                }
                            }
                        </div>

                        <div id="toDateWidget" class="col-lg-3 col-md-3 col-sm-12 col-xs-12" data-mddatetimepicker="true" data-targetselector="#toDate" data-trigger="click" data-enabletimepicker="false" data-isgregorian="false">

                            <div style="margin-right: 0px;">
                                <div class="glyphicon glyphicon-calendar col-md-1" style="margin-right:-38px"></div>
                                @{
                                    if (@Thread.CurrentThread.CurrentCulture.Name == "fa-IR")
                                    {
                                        <span class="col-md-1" style="margin-top:16px;margin-right:0px;margin-right:-30px">@Localization.getString("To")</span>
                                    }
                                    else
                                    {
                                        <span class="col-md-1" style="margin-top:16px;margin-right:0px;margin-left:0px">@Localization.getString("To")</span>
                                    }
                                }
                            </div>
                            @{
                                if (@Thread.CurrentThread.CurrentCulture.Name == "fa-IR")
                                {
                                    <div>
                                        <input type="text" class="form-control no-padding col-md-10" id="toDate" placeholder="تا تاریخ" />
                                    </div>
                                }
                                else
                                {
                                    <div style="margin-left:40px">
                                        <input type="text" class="form-control no-padding col-md-10" id="toDate" placeholder="تا تاریخ" />
                                    </div>
                                }
                            }
                        </div>

                        <div class="form-group">
                            <div class="col-lg-2">
                                <select id="e1" style="width:100%;height:35px;margin-right:-40px;">
                                    @{
                                        foreach (var item in Model)
                                        {
                                            <option value="@item.ServerName" />@item.name
                                        }
                                    }
                                </select>
                            </div>
                        </div>

                        <div class="buttons-preview" id="btnShowEnv">
                            <a href="javascript:void(0);" class="btn btn-primary" style="margin-top:-14px;margin-right:-27px">@Localization.getString("Show")</a>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>
</div>

<div class="row" style="margin-top:10px">
    <div class="col-lg-5-5 col-md-5 col-sm-5 col-xs-5 curve-10" style="background-color:white;margin-top:10px;margin-left:10px;width:49%">
        <div class="card">
            <div class="curve-10 header">
                <p class="center-vertically text-bold" style="color:white">
                    @Localization.getString("FreeStall_Map")
                </p>
            </div>
            <div id="map_canvas" class="curve-10 header" style="background-color: white; height: 370px; margin-bottom: 15px;"></div>
        </div>
    </div>
    @{
        if (PermissionViewer.WillBeShow("FreeStall-getEncryptedValue", User.Identity.Name))
        {
            <div class="col-lg-5-5 col-md-5 col-sm-5 col-xs-5 curve-10" style="background-color:white;margin-top:10px;width:49%">
                <div class="card">
                    <div class="curve-10 header">
                        <p class="center-vertically text-bold" style="color:white">
                            @Localization.getString("THI")
                        </p>
                    </div>
                    <div id="chartdiv1" style="background-color:white"></div>
                </div>
            </div>
        }
    }
</div>
<div class="row clearfix">
    <div class="col-lg-5-5 col-md-5 col-sm-5 col-xs-5 curve-10" style="background-color:white;margin-top:10px;margin-left:10px;width:49%">
        <div class="card">
            <div class="curve-10 header">
                <p class="center-vertically text-bold" style="color:white">
                    @Localization.getString("Humidity")
                </p>
            </div>
            <div id="chartdiv2" style="background-color:white"></div>
        </div>
    </div>
    <div class="col-lg-5-5 col-md-5 col-sm-5 col-xs-5 curve-10" style="background-color:white;margin-top:10px;width:49%">
        <div class="card">
            <div class="curve-10 header">
                <p class="center-vertically text-bold" style="color:white">
                    @Localization.getString("Temperature")
                </p>
            </div>
            <div id="chartdiv3" style="background-color:white"></div>
        </div>
    </div>
</div>

@section PageScripts{
    <script src="~/assets/Charts/amchart_fa_date/jdate.min.js"></script>
    @*<script src="~/assets/Charts/amchart_fa_date/amcharts.js"></script>*@
    <script src="~/assets/Charts/amchart_fa_date/jdate.min.js"></script>
    @{
        if (@Thread.CurrentThread.CurrentCulture.Name == "fa-IR")
        {
            <script src="~/assets/Charts/amchart_fa_date/amcharts_fa.js"></script>
        }
        else
        {
            <script src="~/assets/Charts/amchart_fa_date/amcharts_en.js"></script>
        }
    }
    <script src="~/assets/Charts/amchart_fa_date/serial.js"></script>
    @*<script src="~/assets/Charts/amchart_fa_date/plugins/export/export.min.js"></script>*@
    <script src="~/assets/Charts/amchart_fa_date/themes/none.js"></script>
    <script src="http://maps.google.com/maps/api/js?sensor=true&key=AIzaSyDrbXqxXPH_oWjPIuM8AikKdIkKKR01Fh8" type="text/javascript"></script>
    <script src="/assets/js/MdBootstrapPersianDateTimePicker/jalaali.js"></script>
    <script src="/assets/js/MdBootstrapPersianDateTimePicker/jquery.Bootstrap-PersianDateTimePicker.js"></script>
    <script src="~/assets/Thems/LoadingDialog/bootstrap-waitingfor.js"></script>

    @*At start, Run from here*@
    <script>
        var cultureInfo = '@Thread.CurrentThread.CurrentCulture.Name';

        var MACNumber = 'e3:ad:eb:31:e0:ef';
        document.getElementById('SelectedMAC').value = MACNumber;

        InitialFromDate();

        function InitialFromDate()
        {
            if (cultureInfo == "fa-IR")
            {
                $.ajax({
                    url: '@Url.Action("getCurrentDate", "Utility")',
                    type: "POST",
                    data: { 'AddHours': -140 },
                    success: function (data) {
                        $("#fromDateWidget").val(data);
                        $("#fromDate").val(data);
                        InitialToDate();
                    },
                    error: function (xhr, error) {
                        alert("ERROR Detail.cshtml");
                    }
                });
            }
            else
            {
                $.ajax({
                    url: '@Url.Action("getCurrentGeoDate", "Utility")',
                    type: "POST",
                    data: { 'AddHours': -140 },
                    success: function (data) {
                        $("#fromDateWidget").val(data);
                        $("#fromDate").val(data);
                        InitialToDate();
                    },
                    error: function (xhr, error) {
                        alert("ERROR Detail.cshtml");
                    }
                });
            }

        }

        function InitialToDate()
        {
            if (cultureInfo == "fa-IR")
            {
                $.ajax({
                    url: '@Url.Action("getCurrentDate", "Utility")',
                    type: "POST",
                    data: { 'AddHours': +24 },
                    success: function (data) {
                        $("#toDateWidget").val(data);
                        $("#toDate").val(data);
                    },
                    error: function (xhr, error) {
                        alert("ERROR Detail.cshtml");
                    }
                });
            }
            else
            {
                $.ajax({
                    url: '@Url.Action("getCurrentGeoDate", "Utility")',
                    type: "POST",
                    data: { 'AddHours': 0 },
                    success: function (data) {
                        $("#toDateWidget").val(data);
                        $("#toDate").val(data);
                    },
                    error: function (xhr, error) {
                        alert("ERROR Detail.cshtml");
                    }
                });
            }

        }

        function drawEnvPlot(MACNumber, index, LoadMap)
        {
            waitingDialog.show('@Localization.getString("Freestall_Loading")', {
                headerText: '@Localization.getString("Free_stall")', dialogSize: 'sm', progressType: 'danger'
            });
            $.post('@Url.Action("getHTData", "FreeStallPlot")',
            {
                StartDate: $("#fromDate").val(),
                EndDate: $("#toDate").val(),
                Step: '10',
                FreeStallId: document.getElementById('e1').value
            },
            function (data, status) {
                debugger;
                if (data.length != 0)
                {
                    //alert(data[0][0].MacAddress);
                }
                
                if (data.length === 0)
                {
                    if (chart1 != null)
                    {
                        chart1.clear();
                        chart2.clear();
                        chart3.clear();
                    }
                }
                else
                {
                    DrawTHI(data, index);
                    DrawHumidity(data, index);
                    DrawTemperature(data, index);
                }
                $.post("/FreeStallPlot/getMap",
                {
                    MAC: MACNumber,
                    ServerName: document.getElementById('e1').value
                },
                function (data) {
                    if (LoadMap)
                    {
                        DrawMap(data.Map, data.CenterMap.Lat, data.CenterMap.Lng, data.ZoneId, data.MacList);
                    }
                    waitingDialog.hide();
                });
            });

        }
    </script>

    @*Draw plots*@
    <script>
    var chart1;
    var chart2;
    var chart3;
    function DrawTHI(input, index)
    {
        debugger;
        var charData = [];
        if (input.length > index)
        {
            for (var i = 0; i < input[index][0].Values.length; i++) {
                charData.push(
                    {
                        date: input[index][0].Values[i].Date,
                        value: input[index][0].Values[i].THI
                    });
            }
            InitialChart_1(charData);
        }
        else {
            InitialChart_1(charData);
        }
        
    }

    function DrawHumidity(input, index) {
        var charData = [];
        if (input.length > index)
        {
            for (var i = 0; i < input[index][0].Values.length; i++) {
                charData.push(
                    {
                        date: input[index][0].Values[i].Date,
                        value: input[index][0].Values[i].Humidity
                    });
            }
            InitialChart_2(charData);
        }
        else {
            InitialChart_2(charData);
        }
    }

    function DrawTemperature(input, index) {
        var charData = [];
        if (input.length > index)
        {
            for (var i = 0; i < input[index][0].Values.length; i++) {
                charData.push(
                    {
                        date: input[index][0].Values[i].Date,
                        value: input[index][0].Values[i].Temperature
                    });
            }
            InitialChart_3(charData);
        }
        else {
            InitialChart_3(charData);
        }
    }

    function zoomChart1() {
        chart1.zoomToIndexes(chart1.dataProvider.length - 40, chart1.dataProvider.length - 1);
    }

    function zoomChart2() {
        chart2.zoomToIndexes(chart2.dataProvider.length - 40, chart2.dataProvider.length - 1);
    }

    function zoomChart3() {
        chart3.zoomToIndexes(chart3.dataProvider.length - 40, chart3.dataProvider.length - 1);
    }

    function InitialChart_1(charData) {
        chart1 = AmCharts.makeChart("chartdiv1", {
            "type": "serial",
            "theme": "none",
            "marginRight": 40,
            "marginLeft": 40,
            "autoMarginOffset": 20,
            "mouseWheelZoomEnabled": true,
            "dataDateFormat": "YYYY/MM/DD HH:NN",
            "valueAxes": [{
                "id": "v1",
                "axisAlpha": 0,
                "position": "left",
                "ignoreAxisWidth": true
            }],
            "balloon": {
                "borderThickness": 1,
                "shadowAlpha": 0
            },
            "graphs": [{
                "id": "g1",
                "balloon": {
                    "drop": true,
                    "adjustBorderColor": false,
                    "color": "#ffffff"
                },
                "bullet": "round",
                "bulletBorderAlpha": 1,
                "bulletColor": "#FFFFFF",
                "bulletSize": 5,
                "hideBulletsCount": 50,
                "lineThickness": 2,
                "title": "red line",
                "useLineColorForBulletBorder": true,
                "valueField": "value",
                "balloonText": "<span style='font-size:12x;'>[[value]]</span>"
            }],
            "chartScrollbar": {
                "graph": "g1",
                "oppositeAxis": true,
                "offset": 30,
                "scrollbarHeight": 20,
                "backgroundAlpha": 0,
                "selectedBackgroundAlpha": 0.1,
                "selectedBackgroundColor": "#888888",
                "graphFillAlpha": 0,
                "graphLineAlpha": 0.5,
                "selectedGraphFillAlpha": 0,
                "selectedGraphLineAlpha": 1,
                "autoGridCount": true,
                "color": "#AAAAAA"
            },
            "chartCursor": {
                "pan": true,
                "valueLineEnabled": true,
                "valueLineBalloonEnabled": true,
                "cursorAlpha": 1,
                "cursorColor": "#258cbb",
                "limitToGraph": "g1",
                "valueLineAlpha": 0.2,
                "valueZoomable": true,
                "categoryBalloonDateFormat": "JJ:NN D MMM YYYY"
            },
            "valueScrollbar": {
                "oppositeAxis": true,
                "offset": 50,
                "scrollbarHeight": 5
            },
            "categoryField": "date",
            "categoryAxis": {
                "parseDates": true,
                "dashLength": 1,
                "minPeriod": "mm",
                "minorGridEnabled": true,
                "dateFormats": [{
                    period: 'fff',
                    format: 'JJ:NN:SS'
                }, {
                    period: 'ss',
                    format: 'JJ:NN:SS'
                }, {
                    period: 'mm',
                    format: 'JJ:NN:SS'
                }, {
                    period: 'hh',
                    format: 'JJ:NN'
                }, {
                    period: 'DD',
                    format: 'MMM D'
                }, {
                    period: 'WW',
                    format: 'MMM D'
                }, {
                    period: 'MM',
                    format: 'MMM YYYY'
                }, {
                    period: 'YYYY',
                    format: 'MMM YYYY'
                }]
            },
            "export": {
                "enabled": true
            },
            "dataProvider": charData
        });
        chart1.addListener("rendered", zoomChart1);
        zoomChart1();
    }

    function InitialChart_2(charData) {
        chart2 = AmCharts.makeChart("chartdiv2", {
            "type": "serial",
            "theme": "none",
            "marginRight": 40,
            "marginLeft": 40,
            "autoMarginOffset": 20,
            "mouseWheelZoomEnabled": true,
            "dataDateFormat": "YYYY/MM/DD HH:NN",
            "valueAxes": [{
                "id": "v1",
                "axisAlpha": 0,
                "position": "left",
                "ignoreAxisWidth": true
            }],
            "balloon": {
                "borderThickness": 1,
                "shadowAlpha": 0
            },
            "graphs": [{
                "id": "g1",
                "balloon": {
                    "drop": true,
                    "adjustBorderColor": false,
                    "color": "#ffffff"
                },
                "bullet": "round",
                "bulletBorderAlpha": 1,
                "bulletColor": "#FFFFFF",
                "bulletSize": 5,
                "hideBulletsCount": 50,
                "lineThickness": 2,
                "title": "red line",
                "useLineColorForBulletBorder": true,
                "valueField": "value",
                "balloonText": "<span style='font-size:12x;'>[[value]]</span>"
            }],
            "chartScrollbar": {
                "graph": "g1",
                "oppositeAxis": true,
                "offset": 30,
                "scrollbarHeight": 20,
                "backgroundAlpha": 0,
                "selectedBackgroundAlpha": 0.1,
                "selectedBackgroundColor": "#888888",
                "graphFillAlpha": 0,
                "graphLineAlpha": 0.5,
                "selectedGraphFillAlpha": 0,
                "selectedGraphLineAlpha": 1,
                "autoGridCount": true,
                "color": "#AAAAAA"
            },
            "chartCursor": {
                "pan": true,
                "valueLineEnabled": true,
                "valueLineBalloonEnabled": true,
                "cursorAlpha": 1,
                "cursorColor": "#258cbb",
                "limitToGraph": "g1",
                "valueLineAlpha": 0.2,
                "valueZoomable": true,
                "categoryBalloonDateFormat": "JJ:NN D MMM YYYY"
            },
            "valueScrollbar": {
                "oppositeAxis": true,
                "offset": 50,
                "scrollbarHeight": 5
            },
            "categoryField": "date",
            "categoryAxis": {
                "parseDates": true,
                "dashLength": 1,
                "minPeriod": "mm",
                "minorGridEnabled": true,
                "dateFormats": [{
                    period: 'fff',
                    format: 'JJ:NN:SS'
                }, {
                    period: 'ss',
                    format: 'JJ:NN:SS'
                }, {
                    period: 'mm',
                    format: 'JJ:NN:SS'
                }, {
                    period: 'hh',
                    format: 'JJ:NN'
                }, {
                    period: 'DD',
                    format: 'MMM D'
                }, {
                    period: 'WW',
                    format: 'MMM D'
                }, {
                    period: 'MM',
                    format: 'MMM YYYY'
                }, {
                    period: 'YYYY',
                    format: 'MMM YYYY'
                }]
            },
            "export": {
                "enabled": true
            },
            "dataProvider": charData
        });
        chart2.addListener("rendered", zoomChart2);
        zoomChart2();
    }

    function InitialChart_3(charData) {
        chart3 = AmCharts.makeChart("chartdiv3", {
            "type": "serial",
            "theme": "none",
            "marginRight": 40,
            "marginLeft": 40,
            "autoMarginOffset": 20,
            "mouseWheelZoomEnabled": true,
            "dataDateFormat": "YYYY/MM/DD HH:NN",
            "valueAxes": [{
                "id": "v1",
                "axisAlpha": 0,
                "position": "left",
                "ignoreAxisWidth": true
            }],
            "balloon": {
                "borderThickness": 1,
                "shadowAlpha": 0
            },
            "graphs": [{
                "id": "g1",
                "balloon": {
                    "drop": true,
                    "adjustBorderColor": false,
                    "color": "#ffffff"
                },
                "bullet": "round",
                "bulletBorderAlpha": 1,
                "bulletColor": "#FFFFFF",
                "bulletSize": 5,
                "hideBulletsCount": 50,
                "lineThickness": 2,
                "title": "red line",
                "useLineColorForBulletBorder": true,
                "valueField": "value",
                "balloonText": "<span style='font-size:12x;'>[[value]]</span>"
            }],
            "chartScrollbar": {
                "graph": "g1",
                "oppositeAxis": true,
                "offset": 30,
                "scrollbarHeight": 20,
                "backgroundAlpha": 0,
                "selectedBackgroundAlpha": 0.1,
                "selectedBackgroundColor": "#888888",
                "graphFillAlpha": 0,
                "graphLineAlpha": 0.5,
                "selectedGraphFillAlpha": 0,
                "selectedGraphLineAlpha": 1,
                "autoGridCount": true,
                "color": "#AAAAAA"
            },
            "chartCursor": {
                "pan": true,
                "valueLineEnabled": true,
                "valueLineBalloonEnabled": true,
                "cursorAlpha": 1,
                "cursorColor": "#258cbb",
                "limitToGraph": "g1",
                "valueLineAlpha": 0.2,
                "valueZoomable": true,
                "categoryBalloonDateFormat": "JJ:NN D MMM YYYY"
            },
            "valueScrollbar": {
                "oppositeAxis": true,
                "offset": 50,
                "scrollbarHeight": 5
            },
            "categoryField": "date",
            "categoryAxis": {
                "parseDates": true,
                "dashLength": 1,
                "minPeriod": "mm",
                "minorGridEnabled": true,
                "dateFormats": [{
                    period: 'fff',
                    format: 'JJ:NN:SS'
                }, {
                    period: 'ss',
                    format: 'JJ:NN:SS'
                }, {
                    period: 'mm',
                    format: 'JJ:NN:SS'
                }, {
                    period: 'hh',
                    format: 'JJ:NN'
                }, {
                    period: 'DD',
                    format: 'MMM D'
                }, {
                    period: 'WW',
                    format: 'MMM D'
                }, {
                    period: 'MM',
                    format: 'MMM YYYY'
                }, {
                    period: 'YYYY',
                    format: 'MMM YYYY'
                }]
            },
            "export": {
                "enabled": true
            },
            "dataProvider": charData
        });
        chart3.addListener("rendered", zoomChart3);
        zoomChart3();
    }

    </script>

    @*Draw map*@
    <script>
    var map;
    function DrawMap(data, center_lat, center_lng, zoneId, sensor_position_list)
    {
        if (sensor_position_list.length != 0)
        {
            var myLatLng = new google.maps.LatLng(center_lat, center_lng);
            map = new google.maps.Map(document.getElementById('map_canvas'), {
                zoom: 18,
                center: myLatLng,
                scrollwheel: true,
                panControl: true,
                zoomControl: true,
                scaleControl: true,
                disableDefaultUI: true
            });
            var i;
            var marker;
            var markerList = [];
            var x_offset = 200;
            var y_offset = 100;
            for (i = 0; i < sensor_position_list.length; i++) {
                if (i == 0) {
                    marker = new google.maps.Marker({
                        position: new google.maps.LatLng(sensor_position_list[i].Lat, sensor_position_list[i].Lng),
                        map: map,
                        icon: pinSymbol('red')
                    });
                }
                else {
                    marker = new google.maps.Marker({
                        position: new google.maps.LatLng(sensor_position_list[i].Lat, sensor_position_list[i].Lng),
                        map: map,
                        icon: pinSymbol('blue')
                    });
                }

                markerList.push(marker);
            }
            for (i = 0; i < sensor_position_list.length; i++) {
                google.maps.event.addListener(markerList[i], 'click', (function (marker, i) {
                    return function () {
                        for (var n = 0; n < markerList.length; n++) {
                            markerList[n].setIcon(pinSymbol('blue'));
                        }
                        markerList[i].setIcon(pinSymbol('red'));
                        document.getElementById('SelectedMAC').value = sensor_position_list[i].MAC;
                        drawEnvPlot(sensor_position_list[i].MAC, i, false);
                    }
                })(markerList[i], i));
            }
            google.maps.event.addListener(map, 'zoom_changed', function () {
                var zoomLevel = map.getZoom();
                var lat = markerList[0].getPosition().lat();
                var lng = markerList[0].getPosition().lng();
            });

            for (var i = 0; i < data.length; i++)
            {
                map.data.addGeoJson(data[i]);
            }
            map.data.setStyle(function (feature) {
                var SD_NAME = feature.getProperty('name');
                var SD_FILL = feature.getProperty('fill');
                SD_NAME = SD_NAME.replace("km_", "");
                SD_NAME = SD_NAME.replace("km-", "");
                if (SD_NAME == zoneId) {
                    color = "#ff00ba";
                }
                else {
                    color = "#0cff00";
                }
                return {
                    fillColor: color,
                    strokeWeight: 1
                }
            });
        }
        else
        {
            var myLatLng = new google.maps.LatLng(center_lat, center_lng);
            map = new google.maps.Map(document.getElementById('map_canvas'), {
                zoom: 18,
                center: myLatLng,
                scrollwheel: true,
                panControl: true,
                zoomControl: true,
                scaleControl: true,
                disableDefaultUI: true
            });
            var i;
            var marker;
            var markerList = [];
            var x_offset = 200;
            var y_offset = 100;
            
            google.maps.event.addListener(map, 'zoom_changed', function () {
                var zoomLevel = map.getZoom();
                var lat = markerList[0].getPosition().lat();
                var lng = markerList[0].getPosition().lng();
            });

            for (var i = 0; i < data.length; i++) {
                map.data.addGeoJson(data[i]);
            }
            map.data.setStyle(function (feature) {
                var SD_NAME = feature.getProperty('name');
                var SD_FILL = feature.getProperty('fill');
                SD_NAME = SD_NAME.replace("km_", "");
                SD_NAME = SD_NAME.replace("km-", "");
                if (SD_NAME == zoneId) {
                    color = "#ff00ba";
                }
                else {
                    color = "#0cff00";
                }
                return {
                    fillColor: color,
                    strokeWeight: 1
                }
            });
        }
    }

    function pinSymbol(color) {
        return {
            path: 'M125 410 c-56 -72 -111 -176 -120 -224 -7 -36 11 -83 49 -124 76 -85 223 -67 270 31 28 60 29 88 6 150 -19 51 -122 205 -148 221 -6 3 -32 -21 -57 -54z m110 -175 c35 -34 33 -78 -4 -116 -35 -35 -71 -37 -105 -7 -40 35 -43 78 -11 116 34 41 84 44 120 7z',
            fillColor: color,
            fillOpacity: 0.8,
            scale: 0.1,
            strokeColor: color,
            strokeWeight: 1,
            anchor: new google.maps.Point(185, 500)
        };
    }
    </script>

    <script>
        if (cultureInfo == "fa-IR")
        {
            $('#fromDateWidget').MdPersianDateTimePicker({
                Placement: 'bottom',
                Trigger: 'click',
                EnableTimePicker: false,
                TargetSelector: '#fromDate',
                GroupId: '',
                ToDate: false,
                FromDate: false,
                DisableBeforeToday: false,
                Disabled: false,
                Format: 'yyyy/MM/dd',
                IsGregorian: false
            });

            $('#toDateWidget').MdPersianDateTimePicker({
                Placement: 'bottom',
                Trigger: 'click',
                EnableTimePicker: false,
                TargetSelector: '#toDate',
                GroupId: '',
                ToDate: false,
                FromDate: false,
                DisableBeforeToday: false,
                Disabled: false,
                Format: 'yyyy/MM/dd',
                IsGregorian: false
            });
        }
        else
        {
            $('#fromDateWidget').MdPersianDateTimePicker({
                Placement: 'bottom',
                Trigger: 'click',
                EnableTimePicker: false,
                TargetSelector: '#fromDate',
                GroupId: '',
                ToDate: false,
                FromDate: false,
                DisableBeforeToday: false,
                Disabled: false,
                Format: 'yyyy/MM/dd',
                IsGregorian: true
            });

            $('#toDateWidget').MdPersianDateTimePicker({
                Placement: 'bottom',
                Trigger: 'click',
                EnableTimePicker: false,
                TargetSelector: '#toDate',
                GroupId: '',
                ToDate: false,
                FromDate: false,
                DisableBeforeToday: false,
                Disabled: false,
                Format: 'yyyy/MM/dd',
                IsGregorian: true
            });
        }

        $("#fromDate").on("change", function btnShowActivity() {
            $("#fromDate").val(FatoEnNumber($("#fromDate").val()));
        });

        $("#toDate").on("change", function btnShowActivity() {
            $("#toDate").val(FatoEnNumber($("#toDate").val()));
        });

        $("#btnShowEnv").on("click", function btnShowActivity() {
            drawEnvPlot(document.getElementById('SelectedMAC').value, 0, true);
        });

        function FatoEnNumber(number) {
            var persian = [];
            var input = number;
            persian = ["۰", "۱", "۲", "۳", "۴", "۵", "۶", "۷", "۸", "۹"];
            for (var j = 0; j < persian.length; j++) {
                input = input.replace(new RegExp(persian[j], 'g'), j.toString());
            }
            return input;
        }
    </script>
}
